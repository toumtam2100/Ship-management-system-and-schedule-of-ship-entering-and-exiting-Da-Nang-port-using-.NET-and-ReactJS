<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AkaEco.Domain</name>
    </assembly>
    <members>
        <member name="P:AkaEco.Domain.Models.RequestModels.EntryResultRequestModel.From">
            <summary>
            Format YYYY-MM-DD
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.EntryResultRequestModel.To">
            <summary>
            Format YYYY-MM-DD
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchOrderParameters.ServiceType">
            <summary>
            Service type value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchOrderParameters.OrderStatus">
            <summary>
            Order status value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchOrderParameters.OrderName">
            <summary>
            Order name value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchOrderParameters.UserId">
            <summary>
            User Id value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchOrderParameters.OrderId">
            <summary>
            Order Id value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchTemplateParameters.Name">
            <summary>
            Name value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchTemplateParameters.UserId">
            <summary>
            Order Id value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchUserParameters.Name">
            <summary>
            Name value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchUserParameters.UserId">
            <summary>
            UserId value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchUserParameters.Email">
            <summary>
            Email value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchUserParameters.Address">
            <summary>
            Address value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchUserParameters.Status">
            <summary>
            UserStatus value for search criteria
            </summary>
        </member>
        <member name="P:AkaEco.Domain.Models.RequestModels.SearchUserParameters.Role">
            <summary>
            UserRole value for search criteria
            </summary>
        </member>
        <member name="T:AkaEco.Domain.Utility.Operation">
            -
            The data structure representing a diff is a List of Diff objects:
            {Diff(Operation.DELETE, "Hello"), Diff(Operation.INSERT, "Goodbye"),
             Diff(Operation.EQUAL, " world.")}
            which means: delete "Hello", add "Goodbye" and keep " world."
        </member>
        <member name="T:AkaEco.Domain.Utility.Diff">
            Class representing one diff operation.
        </member>
        <member name="M:AkaEco.Domain.Utility.Diff.#ctor(AkaEco.Domain.Utility.Operation,System.String)">
            Constructor.  Initializes the diff with the provided values.
            @param operation One of INSERT, DELETE or EQUAL.
            @param text The text being applied.
        </member>
        <member name="M:AkaEco.Domain.Utility.Diff.ToString">
            Display a human-readable version of this Diff.
            @return text version.
        </member>
        <member name="M:AkaEco.Domain.Utility.Diff.Equals(System.Object)">
            Is this Diff equivalent to another Diff?
            @param d Another Diff to compare against.
            @return true or false.
        </member>
        <member name="T:AkaEco.Domain.Utility.Patch">
            Class representing one patch operation.
        </member>
        <member name="M:AkaEco.Domain.Utility.Patch.ToString">
            Emulate GNU diff's format.
            Header: @@ -382,8 +481,9 @@
            Indices are printed as 1-based, not 0-based.
            @return The GNU diff string.
        </member>
        <member name="T:AkaEco.Domain.Utility.diff_match_patch">
            Class containing the diff, match and patch methods.
            Also Contains the behaviour settings.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_main(System.String,System.String)">
            Find the differences between two texts.
            Run a faster, slightly less optimal diff.
            This method allows the 'checklines' of diff_main() to be optional.
            Most of the time checklines is wanted, so default to true.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @return List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_main(System.String,System.String,System.Boolean)">
            Find the differences between two texts.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @return List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_main(System.String,System.String,System.Boolean,System.DateTime)">
            Find the differences between two texts.  Simplifies the problem by
            stripping any common prefix or suffix off the texts before diffing.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @param deadline Time when the diff should be complete by.  Used
                internally for recursive calls.  Users should set DiffTimeout
                instead.
            @return List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_compute(System.String,System.String,System.Boolean,System.DateTime)">
            Find the differences between two texts.  Assumes that the texts do not
            have any common prefix or suffix.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @param deadline Time when the diff should be complete by.
            @return List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_lineMode(System.String,System.String,System.DateTime)">
            Do a quick line-level diff on both strings, then rediff the parts for
            greater accuracy.
            This speedup can produce non-minimal diffs.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param deadline Time when the diff should be complete by.
            @return List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_bisect(System.String,System.String,System.DateTime)">
            Find the 'middle snake' of a diff, split the problem in two
            and return the recursively constructed diff.
            See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param deadline Time at which to bail if not yet complete.
            @return List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_bisectSplit(System.String,System.String,System.Int32,System.Int32,System.DateTime)">
            Given the location of the 'middle snake', split the diff in two parts
            and recurse.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param x Index of split point in text1.
            @param y Index of split point in text2.
            @param deadline Time at which to bail if not yet complete.
            @return LinkedList of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_linesToChars(System.String,System.String)">
            Split two texts into a list of strings.  Reduce the texts to a string of
            hashes where each Unicode character represents one line.
            @param text1 First string.
            @param text2 Second string.
            @return Three element Object array, containing the encoded text1, the
                encoded text2 and the List of unique strings.  The zeroth element
                of the List of unique strings is intentionally blank.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_linesToCharsMunge(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Int32)">
            Split a text into a list of strings.  Reduce the texts to a string of
            hashes where each Unicode character represents one line.
            @param text String to encode.
            @param lineArray List of unique strings.
            @param lineHash Map of strings to indices.
            @param maxLines Maximum length of lineArray.
            @return Encoded string.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_charsToLines(System.Collections.Generic.ICollection{AkaEco.Domain.Utility.Diff},System.Collections.Generic.IList{System.String})">
            Rehydrate the text in a diff from a string of line hashes to real lines
            of text.
            @param diffs List of Diff objects.
            @param lineArray List of unique strings.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_commonPrefix(System.String,System.String)">
            Determine the common prefix of two strings.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the start of each string.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_commonSuffix(System.String,System.String)">
            Determine the common suffix of two strings.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the end of each string.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_commonOverlap(System.String,System.String)">
            Determine if the suffix of one string is the prefix of another.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the end of the first
                string and the start of the second string.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_halfMatch(System.String,System.String)">
            Do the two texts share a Substring which is at least half the length of
            the longer text?
            This speedup can produce non-minimal diffs.
            @param text1 First string.
            @param text2 Second string.
            @return Five element String array, containing the prefix of text1, the
                suffix of text1, the prefix of text2, the suffix of text2 and the
                common middle.  Or null if there was no match.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_halfMatchI(System.String,System.String,System.Int32)">
            Does a Substring of shorttext exist within longtext such that the
            Substring is at least half the length of longtext?
            @param longtext Longer string.
            @param shorttext Shorter string.
            @param i Start index of quarter length Substring within longtext.
            @return Five element string array, containing the prefix of longtext, the
                suffix of longtext, the prefix of shorttext, the suffix of shorttext
                and the common middle.  Or null if there was no match.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_cleanupSemantic(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Reduce the number of edits by eliminating semantically trivial
            equalities.
            @param diffs List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_cleanupSemanticLossless(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Look for single edits surrounded on both sides by equalities
            which can be shifted sideways to align the edit to a word boundary.
            e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
            @param diffs List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_cleanupSemanticScore(System.String,System.String)">
            Given two strings, compute a score representing whether the internal
            boundary falls on logical boundaries.
            Scores range from 6 (best) to 0 (worst).
            @param one First string.
            @param two Second string.
            @return The score.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_cleanupEfficiency(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Reduce the number of edits by eliminating operationally trivial
            equalities.
            @param diffs List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_cleanupMerge(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Reorder and merge like edit sections.  Merge equalities.
            Any edit section can move as long as it doesn't cross an equality.
            @param diffs List of Diff objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_xIndex(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff},System.Int32)">
            loc is a location in text1, compute and return the equivalent location in
            text2.
            e.g. "The cat" vs "The big cat", 1->1, 5->8
            @param diffs List of Diff objects.
            @param loc Location within text1.
            @return Location within text2.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_prettyHtml(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Convert a Diff list into a pretty HTML report.
            @param diffs List of Diff objects.
            @return HTML representation.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_text1(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Compute and return the source text (all equalities and deletions).
            @param diffs List of Diff objects.
            @return Source text.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_text2(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Compute and return the destination text (all equalities and insertions).
            @param diffs List of Diff objects.
            @return Destination text.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_levenshtein(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Compute the Levenshtein distance; the number of inserted, deleted or
            substituted characters.
            @param diffs List of Diff objects.
            @return Number of changes.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_toDelta(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Crush the diff into an encoded string which describes the operations
            required to transform text1 into text2.
            E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
            Operations are tab-separated.  Inserted text is escaped using %xx
            notation.
            @param diffs Array of Diff objects.
            @return Delta text.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.diff_fromDelta(System.String,System.String)">
            Given the original text1, and an encoded string which describes the
            operations required to transform text1 into text2, compute the full diff.
            @param text1 Source string for the diff.
            @param delta Delta text.
            @return Array of Diff objects or null if invalid.
            @throws ArgumentException If invalid input.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.match_main(System.String,System.String,System.Int32)">
            Locate the best instance of 'pattern' in 'text' near 'loc'.
            Returns -1 if no match found.
            @param text The text to search.
            @param pattern The pattern to search for.
            @param loc The location to search around.
            @return Best match index or -1.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.match_bitap(System.String,System.String,System.Int32)">
            Locate the best instance of 'pattern' in 'text' near 'loc' using the
            Bitap algorithm.  Returns -1 if no match found.
            @param text The text to search.
            @param pattern The pattern to search for.
            @param loc The location to search around.
            @return Best match index or -1.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.match_bitapScore(System.Int32,System.Int32,System.Int32,System.String)">
            Compute and return the score for a match with e errors and x location.
            @param e Number of errors in match.
            @param x Location of match.
            @param loc Expected location of match.
            @param pattern Pattern being sought.
            @return Overall score for match (0.0 = good, 1.0 = bad).
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.match_alphabet(System.String)">
            Initialise the alphabet for the Bitap algorithm.
            @param pattern The text to encode.
            @return Hash of character locations.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_addContext(AkaEco.Domain.Utility.Patch,System.String)">
            Increase the context until it is unique,
            but don't let the pattern expand beyond Match_MaxBits.
            @param patch The patch to grow.
            @param text Source text.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_make(System.String,System.String)">
            Compute a list of patches to turn text1 into text2.
            A set of diffs will be computed.
            @param text1 Old text.
            @param text2 New text.
            @return List of Patch objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_make(System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Compute a list of patches to turn text1 into text2.
            text1 will be derived from the provided diffs.
            @param diffs Array of Diff objects for text1 to text2.
            @return List of Patch objects.
        </member>
        <!-- Badly formed XML comment ignored for member "M:AkaEco.Domain.Utility.diff_match_patch.patch_make(System.String,System.String,System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})" -->
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_make(System.String,System.Collections.Generic.List{AkaEco.Domain.Utility.Diff})">
            Compute a list of patches to turn text1 into text2.
            text2 is not provided, diffs are the delta between text1 and text2.
            @param text1 Old text.
            @param diffs Array of Diff objects for text1 to text2.
            @return List of Patch objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_deepCopy(System.Collections.Generic.List{AkaEco.Domain.Utility.Patch})">
            Given an array of patches, return another array that is identical.
            @param patches Array of Patch objects.
            @return Array of Patch objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_apply(System.Collections.Generic.List{AkaEco.Domain.Utility.Patch},System.String)">
            Merge a set of patches onto the text.  Return a patched text, as well
            as an array of true/false values indicating which patches were applied.
            @param patches Array of Patch objects
            @param text Old text.
            @return Two element Object array, containing the new text and an array of
                 bool values.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_addPadding(System.Collections.Generic.List{AkaEco.Domain.Utility.Patch})">
            Add some padding on text start and end so that edges can match something.
            Intended to be called only from within patch_apply.
            @param patches Array of Patch objects.
            @return The padding string added to each side.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_splitMax(System.Collections.Generic.List{AkaEco.Domain.Utility.Patch})">
            Look through the patches and break up any which are longer than the
            maximum limit of the match algorithm.
            Intended to be called only from within patch_apply.
            @param patches List of Patch objects.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_toText(System.Collections.Generic.List{AkaEco.Domain.Utility.Patch})">
            Take a list of patches and return a textual representation.
            @param patches List of Patch objects.
            @return Text representation of patches.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.patch_fromText(System.String)">
            Parse a textual representation of patches and return a List of Patch
            objects.
            @param textline Text representation of patches.
            @return List of Patch objects.
            @throws ArgumentException If invalid input.
        </member>
        <member name="M:AkaEco.Domain.Utility.diff_match_patch.encodeURI(System.String)">
             Encodes a string with URI-style % escaping.
             Compatible with JavaScript's encodeURI function.
            
             @param str The string to encode.
             @return The encoded string.
        </member>
    </members>
</doc>
